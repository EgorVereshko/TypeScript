function someFunc(data) {
    return data.reduce((acc, current) => {
        acc + Number(current.age > 18 && current.isMale), 0);
};
}

// Функция someFunc принимает массив data в качестве аргумента и выполняет следующие действия:

// 1. Метод reduce используется для итерации по элементам массива data.
// Метод reduce принимает два аргумента: аккумулированное значение и
// текущий элемент массива current.

// 2. (acc, current) => { acc + Number(current.age > 18 && current.isMale), 0) }
// Это функция обратного вызова, которая передается в метод reduce. Она берет аккумулированное значение (acc) и текущий элемент массива
// (current) и выполняет следующие действия:
//      Проверяет, является ли возраст текущего элемента больше 18 и является ли пол текущего элемента мужским с
// помощью выражения (current.age > 18 && current.isMale)
//      Приводит результат выражения к числу с помощью Number(...)
//      Добавляет полученное число к аккумулятору acc + ...

// 3. 0
// 0 в данном случае является начальным значением аккумулятора для метода reduce. Это значение будет использоваться для первой итерации.
// Целью этого кода является выполнение операции подсчета количества элементов в массиве data, для которых возраст больше 18 и пол мужской.
// Результатом будет сумма чисел, представляющих количество подходящих элементов.

type Human = {
    name: string,
    age: number,
    gender: 'male' | 'female',
}
function someFunc(data: Human[]): number {
  return data.reduce((acc: number, current: Human) => {
        acc + Number(current.age > 18 && current.gender === 'male'), 0);
    };
}

// Определен тип Human, который представляет объект с полями name, age, gender.
// Определена функция someFunc, которая принимает массив объектов типа Human (data: Human[]) и возвращает число.

// 1. type Human = { ... }
//    Здесь определяется пользовательский тип Human, представляющий объекты с полями name (строка), age (число) и
//    gender (строка, 'male' или 'female'). Создание пользовательских типов помогает обеспечить
//    типизацию и безопасность данных.

// 2. function someFunc(data: Human[]): number { ... }
//    Это объявление функции someFunc, которая принимает один аргумент - массив объектов типа Human с именем data (data: Human[])
//    и возвращает число (number). Эта функция предназначена для обработки массива объектов типа Human.

// 3. data.reduce((acc: number, current: Human) => { ... }, 0)
//    Здесь используется метод reduce для итерации по элементам массива data. Внутри метода reduce находится функция обратного
//    вызова (acc: number, current: Human) => { ... }, которая принимает два аргумента: аккумулятор (acc)
//    и текущий элемент массива (current). Эта функция выполняет операцию проверки
//    возраста (current.age > 18) и пола (current.gender === 'male') для каждого элемента и возвращает число 1, если оба условия
//    выполняются, иначе возвращает число 0. При использовании метода reduce с начальным значением аккумулятора 0, функция обратного
//    вызова последовательно суммирует все числа, возвращаемые для каждого элемента, и возвращает итоговое суммарное значение.

// 4. return data.reduce((acc: number, current: Human) => { ... }, 0);
//    Этот код возвращает итоговое суммарное значение, полученное в результате вызова метода reduce.
//    Оно будет числом, представляющим количество элементов массива data, которые удовлетворяют условиям возраста больше 18 и пола мужского.

// Целью этого кода является подсчет количества элементов в массиве data, для которых возраст
// больше 18 и пол мужской, и возвращение этого количества в виде числа.